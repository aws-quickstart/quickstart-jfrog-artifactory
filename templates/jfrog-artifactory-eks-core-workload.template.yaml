AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys Artifactory into an existing Kubernetes cluster"
Parameters:
  KubeManifestLambdaArn:
    Type: String
  HelmLambdaArn:
    Type: String
  EksClusterName:
    Type: String
  KubeGetLambdaArn:
    Type: String
  NumberOfSecondary:
    Type: Number
  AccessCidr:
    Type: String
  ArtifactoryProduct:
    Type: String
  ArtifactoryLicense1:
    Type: String
  ArtifactoryLicense2:
    Type: String
  ArtifactoryLicense3:
    Type: String
  ArtifactoryLicense4:
    Type: String
  ArtifactoryIamAcessKey:
    Type: String
    NoEcho: 'true'
  SecretAccessKey:
    Type: String
    NoEcho: 'true'
  ArtifactoryS3Bucket:
    Type: String
  CertificateKey:
    Type: String
    NoEcho: 'true'
  Certificate:
    Type: String
  DatabaseUser:
    Type: String
    NoEcho: 'true'
  DatabasePassword:
    Type: String
    NoEcho: 'true'
  DatabaseUrl:
    Type: String
  DatabaseDriver:
    Type: String
  DatabasePluginUrl:
    Type: String
  DatabasePlugin:
    Type: String
  DatabaseType:
    Type: String
  MasterKey:
    Type: String
    NoEcho: 'true'
  ArtifactoryVersion:
    Type: String
  ProDockerRepo:
    Type: String
  NginxDockerRepo:
    Type: String
  ArtifactoryDeploymentSize:
    Type: String
  ReleaseStage:
    Type: String
    Default: BETA
  QsS3BucketName:
    Default: aws-quickstart
    Type: String
  QsS3KeyPrefix:
    Default: quickstart-jfrog-artifactory/
    Type: String
  QsS3BucketRegion:
    Default: 'us-east-1'
    Type: String
Mappings:
  ArtifactoryProductMap:
    JFrog-Artifactory-Pro:
      namespace: jfrog-artifactory
      app: jfrog-artifactory
      infoFile: 'installer-info.json'
      BETA: JFrog-Artifactory-Pro-BETA
      GA: JFrog-Artifactory-Pro-GA
    JFrog-Container-Registry:
      namespace: jfrog-container-registry
      app: jfrog-container-registry
      infoFile: 'installer-info-jcr.json'
      BETA: JFrog-Container-Registry-BETA
      GA: JFrog-Container-Registry-GA
  HelmRepoMap:
    JFrog-Artifactory-Pro-BETA:
      RepoUrl: https://earlyaccess.jfrog.io/artifactory/helm/
      HelmChartVersion: 2.0.11
    JFrog-Artifactory-Pro-GA:
      RepoUrl: https://charts.jfrog.io/
      HelmChartVersion: 2.0.18
    JFrog-Container-Registry-BETA:
      RepoUrl: https://charts.jfrog.io/
      HelmChartVersion: 2.0.8
    JFrog-Container-Registry-GA:
      RepoUrl: https://charts.jfrog.io/
      HelmChartVersion: 2.0.8
  DeploymentSize:
    xxxLarge:
      requestsMem: "240Gi"
      requestsCpu: "64"
      limitsMem: "384Gi"
      limitsCpu: "96"
      javaOptsXms: "192g"
      javaOptsXmx: "288g"
    xxLarge:
      requestsMem: "160Gi"
      requestsCpu: "48"
      limitsMem: "256Gi"
      limitsCpu: "64"
      javaOptsXms: "128g"
      javaOptsXmx: "192g"
    xLarge:
      requestsMem: "120Gi"
      requestsCpu: "32"
      limitsMem: "192Gi"
      limitsCpu: "48"
      javaOptsXms: "96g"
      javaOptsXmx: "144g"
    Large:
      requestsMem: "80Gi"
      requestsCpu: "16"
      limitsMem: "128Gi"
      limitsCpu: "32"
      javaOptsXms: "64g"
      javaOptsXmx: "96g"
    Medium:
      requestsMem: "42Gi"
      requestsCpu: "8"
      limitsMem: "64Gi"
      limitsCpu: "16"
      javaOptsXms: "32g"
      javaOptsXmx: "48g"
    Small:
      requestsMem: "20Gi"
      requestsCpu: "4"
      limitsMem: "32Gi"
      limitsCpu: "8"
      javaOptsXms: "16g"
      javaOptsXmx: "24g"
    xSmall:
      requestsMem: "6Gi"
      requestsCpu: "2"
      limitsMem: "16Gi"
      limitsCpu: "4"
      javaOptsXms: "8g"
      javaOptsXmx: "12g"
    xxSmall:
      requestsMem: "4Gi"
      requestsCpu: "2"
      limitsMem: "6Gi"
      limitsCpu: "2"
      javaOptsXms: "4g"
      javaOptsXmx: "4g"

Conditions:
  ArtifactoryHa: !Equals [!Ref ArtifactoryProduct, 'JFrog-Artifactory-Pro']
  JcrInstall: !Equals [!Ref ArtifactoryProduct, 'JFrog-Container-Registry']
  UsingDefaultBucket: !Equals [!Ref QsS3BucketName, 'aws-quickstart']
Resources:
  NameSpace:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      ClusterName: !Ref EksClusterName
      Manifest:
        kind: Namespace
        apiVersion: v1
        metadata:
          name: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, namespace]
          labels:
            app: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, app]

  CertificateStore:
    DependsOn: NameSpace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      ClusterName: !Ref EksClusterName
      Manifest:
        kind: Secret
        apiVersion: v1
        metadata:
          name: artifactory-nginx-tls
          namespace: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, namespace]
          labels:
            app: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, app]
            chart: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, app]
        type: kubernetes.io/tls
        data:
          tls.crt:
            Fn::Base64:
              !Join ["\n", "Fn::Split": ["|", !Ref Certificate]]
          tls.key:
            Fn::Base64:
              !Join ["\n", "Fn::Split": ["|", !Ref CertificateKey]]

  LicenseStore:
    Condition: ArtifactoryHa
    DependsOn: NameSpace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      ClusterName: !Ref EksClusterName
      Manifest:
        kind: Secret
        apiVersion: v1
        metadata:
          name: artifactory-cluster-license
          namespace: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, namespace]
          labels:
            app: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, app]
            chart: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, app]
        type: Opaque
        stringData:
          art.lic: !Sub
            >-
            ${ArtifactoryLicense1}


            ${ArtifactoryLicense2}


            ${ArtifactoryLicense3}


            ${ArtifactoryLicense4}
  SecureStoreDatabase:
    DependsOn: NameSpace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      ClusterName: !Ref EksClusterName
      Manifest:
        kind: Secret
        apiVersion: v1
        metadata:
          name: artifactory-cluster-db
          namespace: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, namespace]
          labels:
            app: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, app]
            chart: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, app]
        type: Opaque
        data:
          db-user:
            Fn::Base64:
              !Sub ${DatabaseUser}
          db-password:
            Fn::Base64:
              !Sub ${DatabasePassword}
          db-url:
            Fn::Base64:
              !Sub ${DatabaseUrl}
  ArtifactoryDeployment:
    Condition: ArtifactoryHa
    Type: "Custom::Helm"
    DependsOn:
      - LicenseStore
      - CertificateStore
    Version: '1.0'
    Properties:
      ServiceToken: !Ref HelmLambdaArn
      ClusterName: !Ref EksClusterName
      Namespace: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, namespace]
      Name: quickstart-artifactory-ha
      Chart: jfrog/artifactory-ha
      RepoUrl: !FindInMap [HelmRepoMap, !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, !Ref ReleaseStage], RepoUrl]
      # If we want to test specific version of the Helm chart, we can pass it here
      Version: !FindInMap [HelmRepoMap, !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, !Ref ReleaseStage], HelmChartVersion]
      ValueYaml: !Sub
        - |
          artifactory:
            name: artifactory-ha
            image:
              repository: ${ProDockerRepo}
              version: ${ArtifactoryVersion}
              pullPolicy: Always
            deleteDBPropertiesOnStartup: true
            license:
              secret: artifactory-cluster-license
              dataKey: art.lic
            masterKey: ${MasterKey}
            preStartCommand: mkdir -p /var/opt/jfrog/artifactory/etc/artifactory/info/; wget https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QsS3KeyPrefix}scripts/roles/artifactory/files/${info_file} -O /var/opt/jfrog/artifactory/etc/artifactory/info/installer-info.json; mkdir -p /var/opt/jfrog/artifactory/bootstrap/artifactory/tomcat/lib/; wget -O  /var/opt/jfrog/artifactory/bootstrap/artifactory/tomcat/lib/${DatabasePlugin} ${DatabasePluginUrl}
            persistence:
              enabled: false
              local: false
              type: aws-s3-v3
              binarystoreXml: |
                <!-- AWS S3 V3 -->
                <config version="2">
                    <chain> <!--template="cluster-s3-storage-v3"-->
                        <provider id="cache-fs-eventual-s3" type="cache-fs">
                            <provider id="sharding-cluster-eventual-s3" type="sharding-cluster">
                                <sub-provider id="eventual-cluster-s3" type="eventual-cluster">
                                    <provider id="retry-s3" type="retry">
                                        <provider id="s3-storage-v3" type="s3-storage-v3"/>
                                    </provider>
                                </sub-provider>
                                <dynamic-provider id="remote-s3" type="remote"/>
                            </provider>
                        </provider>
                    </chain>

                    <provider id="sharding-cluster-eventual-s3" type="sharding-cluster">
                        <readBehavior>crossNetworkStrategy</readBehavior>
                        <writeBehavior>crossNetworkStrategy</writeBehavior>
                        <redundancy>3</redundancy>
                        <property name="zones" value="local,remote"/>
                    </provider>

                    <provider id="remote-s3" type="remote">
                        <zone>remote</zone>
                    </provider>

                    <provider id="eventual-cluster-s3" type="eventual-cluster">
                        <zone>local</zone>
                    </provider>

                    <!-- Set max cache-fs size -->
                    <provider id="cache-fs-eventual-s3" type="cache-fs">
                        <maxCacheSize>5e+10</maxCacheSize>
                        <cacheProviderDir>cache</cacheProviderDir>
                    </provider>
                    <provider id="s3-storage-v3" type="s3-storage-v3">
                        <testConnection>false</testConnection>
                        <identity>${ArtifactoryIamAcessKey}</identity>
                        <credential>${SecretAccessKey}</credential>
                        <region>${AWS::Region}</region>
                        <bucketName>${ArtifactoryS3Bucket}</bucketName>
                        <path>artifactory/filestore</path>
                        <endpoint></endpoint>
                        <useInstanceCredentials>false</useInstanceCredentials>
                        <usePresigning>false</usePresigning>
                        <signatureExpirySeconds>300</signatureExpirySeconds>
                    </provider>
                </config>
              #awsS3V3:
              #  region: ${AWS::Region}
              #  identity: ${ArtifactoryIamAcessKey}
              #  credential: ${SecretAccessKey}
              #  bucketName: ${ArtifactoryS3Bucket}
              #  useInstanceCredentials: false
            service:
              pool: all
            primary:
              resources:
                requests:
                  memory: "${requests_memory}"
                  cpu: "${requests_cpu}"
                limits:
                  memory: "${limits_memory}"
                  cpu: "${limits_cpu}"
              javaOpts:
                xms: "${java_xms}"
                xmx: "${java_xmx}"
              nodeSelector:
                partition: ${ArtifactoryProduct}
            node:
              replicaCount: ${NumberOfSecondary}
              resources:
                requests:
                  memory: "${requests_memory}"
                  cpu: "${requests_cpu}"
                limits:
                  memory: "${limits_memory}"
                  cpu: "${limits_cpu}"
              javaOpts:
                xms: "${java_xms}"
                xmx: "${java_xmx}"
              nodeSelector:
                partition: ${ArtifactoryProduct}-secondary
              ## Only used if "affinity" is empty
              podAntiAffinity:
                ## Valid values are "soft" or "hard"; any other value indicates no anti-affinity
                type: "soft"
                topologyKey: "kubernetes.io/hostname"
          postgresql:
            enabled: false
          database:
            type: ${DatabaseType}
            driver: ${DatabaseDriver}
            secrets:
              user:
                name: artifactory-cluster-db
                key: "db-user"
              password:
                name: artifactory-cluster-db
                key: "db-password"
              url:
                name: artifactory-cluster-db
                key: "db-url"
          nginx:
            enabled: true
            image:
              repository: ${NginxDockerRepo}
              version: ${ArtifactoryVersion}
            replicaCount: 3
            service:
              loadBalancerSourceRanges:  [ "${AccessCidr}" ]
            tlsSecretName: artifactory-nginx-tls
        - {
          info_file: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, infoFile],
          requests_memory: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, requestsMem],
          requests_cpu: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, requestsCpu],
          limits_memory: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, limitsMem],
          limits_cpu: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, limitsCpu],
          java_xms: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, javaOptsXms],
          java_xmx: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, javaOptsXmx],
          S3Bucket: !If [UsingDefaultBucket, !Sub '{QsS3BucketName}-${AWS::Region}', !Ref 'QsS3BucketName'],
          S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref 'QsS3BucketRegion'],
        }
  IngressHostName:
    Condition: ArtifactoryHa
    DependsOn: ArtifactoryDeployment
    Type: "Custom::KubeGet"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeGetLambdaArn
      ClusterName: !Ref EksClusterName
      Namespace: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, namespace]
      Name: svc/quickstart-artifactory-ha-nginx
      JsonPath: '{.status.loadBalancer.ingress[0].hostname}'
  JcrDeployment:
    Condition: JcrInstall
    Type: "Custom::Helm"
    DependsOn: CertificateStore
    Version: '1.0'
    Properties:
      ServiceToken: !Ref HelmLambdaArn
      ClusterName: !Ref EksClusterName
      Namespace: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, namespace]
      Name: quickstart-jcr
      Chart: jfrog/artifactory-jcr
      RepoUrl: !FindInMap [HelmRepoMap, !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, !Ref ReleaseStage], RepoUrl]
      Version: !FindInMap [HelmRepoMap, !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, !Ref ReleaseStage], HelmChartVersion]
      ValueYaml: !Sub
        - |
          artifactory:
            artifactory:
              name: artifactory-jcr
              image:
                repository: ${ProDockerRepo}
                version: ${ArtifactoryVersion}
                pullPolicy: Always
              deleteDBPropertiesOnStartup: true
              masterKey: ${MasterKey}
              preStartCommand: mkdir -p /var/opt/jfrog/artifactory/etc/artifactory/info/; wget https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QsS3KeyPrefix}scripts/roles/artifactory/files/${info_file} -O /var/opt/jfrog/artifactory/etc/artifactory/info/installer-info.json; mkdir -p /var/opt/jfrog/artifactory/bootstrap/artifactory/tomcat/lib/; wget -O  /var/opt/jfrog/artifactory/bootstrap/artifactory/tomcat/lib/${DatabasePlugin} ${DatabasePluginUrl}; cp /bootstrap/artifactory/binarystore.xml /var/opt/jfrog/artifactory/etc/artifactory/binarystore.xml
              persistence:
                enabled: false
                type: aws-s3-v3
                binarystoreXml: |
                  <!-- AWS S3 V3 -->
                  <config version="2">
                      <chain>
                          <provider id="cache-fs" type="cache-fs">
                              <provider id="eventual" type="eventual">
                                  <provider id="retry" type="retry">
                                      <provider id="s3-storage-v3" type="s3-storage-v3"/>
                                  </provider>
                              </provider>
                          </provider>
                      </chain>

                      <!-- Set max cache-fs size -->
                      <provider id="cache-fs" type="cache-fs">
                          <maxCacheSize>5e+10</maxCacheSize>
                          <cacheProviderDir>cache</cacheProviderDir>
                      </provider>
                      <provider id="s3-storage-v3" type="s3-storage-v3">
                          <testConnection>false</testConnection>
                          <identity>${ArtifactoryIamAcessKey}</identity>
                          <credential>${SecretAccessKey}</credential>
                          <region>${AWS::Region}</region>
                          <bucketName>${ArtifactoryS3Bucket}</bucketName>
                          <path>artifactory/filestore</path>
                          <endpoint></endpoint>
                          <useInstanceCredentials>false</useInstanceCredentials>
                          <usePresigning>false</usePresigning>
                          <signatureExpirySeconds>300</signatureExpirySeconds>
                      </provider>
                  </config>
              resources:
                requests:
                  memory: "${requests_memory}"
                  cpu: "${requests_cpu}"
                limits:
                  memory: "${limits_memory}"
                  cpu: "${limits_cpu}"
              javaOpts:
                xms: "${java_xms}"
                xmx: "${java_xmx}"
              nodeSelector:
                partition: ${ArtifactoryProduct}
            postgresql:
              enabled: false
            database:
              type: ${DatabaseType}
              driver: ${DatabaseDriver}
              secrets:
                user:
                  name: artifactory-cluster-db
                  key: "db-user"
                password:
                  name: artifactory-cluster-db
                  key: "db-password"
                url:
                  name: artifactory-cluster-db
                  key: "db-url"
            nginx:
              enabled: true
              image:
                repository: ${NginxDockerRepo}
              replicaCount: ${NumberOfSecondary}
              service:
                loadBalancerSourceRanges:  [ "${AccessCidr}" ]
              tlsSecretName: artifactory-nginx-tls
          postgresql:
            enabled: false
        - {
          info_file: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, infoFile],
          requests_memory: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, requestsMem],
          requests_cpu: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, requestsCpu],
          limits_memory: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, limitsMem],
          limits_cpu: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, limitsCpu],
          java_xms: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, javaOptsXms],
          java_xmx: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, javaOptsXmx],
          S3Bucket: !If [UsingDefaultBucket, !Sub '{QsS3BucketName}-${AWS::Region}', !Ref 'QsS3BucketName'],
          S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref 'QsS3BucketRegion'],
        }
  JcrIngressHostName:
    Condition: JcrInstall
    DependsOn: JcrDeployment
    Type: "Custom::KubeGet"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeGetLambdaArn
      ClusterName: !Ref EksClusterName
      Namespace: !FindInMap [ArtifactoryProductMap, !Ref ArtifactoryProduct, namespace]
      Name: svc/quickstart-jcr-artifactory-nginx
      JsonPath: '{.status.loadBalancer.ingress[0].hostname}'
Outputs:
  ArtifactoryUrl:
    Value: !If [ArtifactoryHa, !Sub "https://${IngressHostName}", !Sub "https://${JcrIngressHostName}"]
