
---
- name: Configure Java
  lineinfile:
    path: /var/opt/jfrog/artifactory/etc/default
    line: export JAVA_OPTIONS="$JAVA_OPTIONS {{ extra_java_opts }}"
    create: yes

- name: Configure Ping
  lineinfile:
    path: /var/opt/jfrog/artifactory/etc/artifactory.system.properties
    line: artifactory.ping.allowUnauthenticated=true
    create: yes

- name: All File/Folders required for Artifactory configuration
  file:
      path: "{{ item.path }}"
      state: "{{ item.state }}"
      owner: artifactory
      group: artifactory
  loop:
    - path: /var/opt/jfrog/artifactory/etc/security/
      state: directory
    - path: /var/opt/jfrog/artifactory/etc/plugins
      state: directory
    - path: /var/opt/jfrog/artifactory/etc/info
      state: directory

- name: Template of the properties and certs as requires for Artifactory
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: artifactory
    group: artifactory
    mode: '0664'
  loop:
    - src: db.properties.j2
      dest: /var/opt/jfrog/artifactory/etc/db.properties
    - src: binarystore.xml.j2
      dest: /var/opt/jfrog/artifactory/etc/binarystore.xml
    - src: ha-node.properties.j2
      dest: /var/opt/jfrog/artifactory/etc/ha-node.properties
    - src: master.key.j2
      dest: /var/opt/jfrog/artifactory/etc/security/master.key
    - src: certificate.pem.j2
      dest: "{{ ssl_dir }}/cert.pem"
    - src: certificate.key.j2
      dest: "{{ key_dir }}/cert.key"
    - src: artifactory.cluster.license.j2
      dest: /var/opt/jfrog/artifactory/etc/artifactory.cluster.license

- name: Copy all static files required for Artifactory
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: artifactory
    group: artifactory
    mode: "{{ item.mode }}"
  loop:
    - src: inactiveServerCleaner.groovy
      dest: /var/opt/jfrog/artifactory/etc/plugins/inactiveServerCleaner.groovy
      mode: '0660'
    - src: installer-info.json
      dest: /var/opt/jfrog/artifactory/etc/info/installer-info.json
      mode: '0660'

- name: Import the RDS certificate into Java KeyStore
  java_cert:
    cert_path: "{{ item.dest }}"
    cert_alias: "{{ item.cert_alias }}"
    keystore_pass: "{{ artifactory_keystore.default_password }}" # Default JKS as you get from the Internet.
    keystore_path: "{{ artifactory_keystore.path }}"
  when: artifactory_import_rds == true
  register: r_java_cert
  loop: "{{ artifactory_java_db_certs }}"
  failed_when: "'Not found' in r_java_cert['msg']"

- name: Change Keystore password
  command: keytool -storepasswd -keystore {{ artifactory_keystore.path }} -storepass {{ artifactory_keystore.default_password }} -new {{ artifactory_keystore.new_keystore_pass }}
  no_log: false
  when: r_java_cert['results']| selectattr('msg', 'search', 'password was incorrect') | list | count == 0
